---
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
allow-lan: true
mode: rule
log-level: info
ipv6: false
external-controller: 0.0.0.0:9090
clash-for-android:
  append-system-dns: false
profile:
  tracing: true
  store-selected: true
  store-fake-ip: true
proxy-providers:
  HongKong:
    type: file
    path: "./proxy_provider/HongKong.yaml"
    health-check:
      enable: true
      interval: 36000
      url: http://www.gstatic.com/generate_204
  Japan:
    type: file
    path: "./proxy_provider/Japan.yaml"
    health-check:
      enable: true
      interval: 36000
      url: http://www.gstatic.com/generate_204
  Taiwan:
    type: file
    path: "./proxy_provider/Taiwan.yaml"
    health-check:
      enable: true
      interval: 36000
      url: http://www.gstatic.com/generate_204
  Singpore:
    type: file
    path: "./proxy_provider/Singpore.yaml"
    health-check:
      enable: true
      interval: 36000
      url: http://www.gstatic.com/generate_204
  USA:
    type: file
    path: "./proxy_provider/USA.yaml"
    health-check:
      enable: true
      interval: 36000
      url: http://www.gstatic.com/generate_204
  OtherZones:
    type: file
    path: "./proxy_provider/OtherZones.yaml"
    health-check:
      enable: true
      interval: 36000
      url: http://www.gstatic.com/generate_204
proxy-groups:
- name: Proxy
  type: select
  use:
  - Taiwan
  - HongKong
  - Japan
  - Singpore
  - USA
  - OtherZones
  proxies:
  - DIRECT
- name: Domestic
  type: select
  proxies:
  - Proxy
  - DIRECT
- name: Netflix
  type: select
  use:
  - Taiwan
  - HongKong
  - Japan
  - Singpore
  - USA
  - OtherZones
  proxies:
  - Proxy
  - DIRECT
- name: Disney
  type: select
  use:
  - Taiwan
  - HongKong
  - Japan
  - Singpore
  - USA
  - OtherZones
  proxies:
  - Proxy
  - DIRECT
- name: YouTube
  type: select
  use:
  - Taiwan
  - HongKong
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Spotify
  type: select
  use:
  - Taiwan
  - HongKong
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Asian TV
  type: select
  use:
  - Taiwan
  - HongKong
  - Japan
  - Singpore
  proxies:
  - Proxy
  - DIRECT
- name: Global TV
  type: select
  use:
  - Taiwan
  - HongKong
  - Japan
  - Singpore
  - USA
  - OtherZones
  proxies:
  - Proxy
  - DIRECT
- name: Apple
  type: select
  use:
  - HongKong
  - Japan
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Apple TV
  type: select
  use:
  - HongKong
  - Japan
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Telegram
  type: select
  use:
  - Taiwan
  - HongKong
  - Singpore
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Google FCM
  type: select
  use:
  - Taiwan
  - HongKong
  - Japan
  - Singpore
  - USA
  - OtherZones
  proxies:
  - Proxy
  - DIRECT
- name: Crypto
  type: select
  use:
  - Taiwan
  - HongKong
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Discord
  type: select
  use:
  - Taiwan
  - HongKong
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Microsoft
  type: select
  use:
  - HongKong
  - Japan
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: OpenAI
  type: select
  use:
  - Taiwan
  - HongKong
  - Japan
  - Singpore
  - USA
  - OtherZones
  proxies:
  - Proxy
  - DIRECT
- name: PayPal
  type: select
  use:
  - Taiwan
  - HongKong
  - Japan
  - Singpore
  - USA
  - OtherZones
  proxies:
  - Proxy
  - DIRECT
- name: Scholar
  type: select
  use:
  - HongKong
  - Japan
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Speedtest
  type: select
  use:
  - HongKong
  - Japan
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Steam
  type: select
  use:
  - Taiwan
  - HongKong
  - Japan
  - Singpore
  - USA
  - OtherZones
  proxies:
  - Proxy
  - DIRECT
- name: miHoYo
  type: select
  use:
  - HongKong
  - Japan
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Other Direct
  type: select
  use:
  - HongKong
  - Japan
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Other Proxy
  type: select
  use:
  - HongKong
  - Japan
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Japan Proxy
  type: select
  use:
  - HongKong
  - Japan
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: Others
  type: select
  use:
  - HongKong
  - Japan
  - USA
  proxies:
  - Proxy
  - DIRECT
- name: AdBlock
  type: select
  proxies:
  - Proxy
  - REJECT
  - DIRECT
rules:
  - 'RULE-SET, Reject, AdBlock'
  - 'RULE-SET, Special, DIRECT'
  - 'RULE-SET, Netflix, Netflix'
  - 'RULE-SET, DisneyPlus, Disney'
  - 'RULE-SET, YouTube, YouTube'
  - 'RULE-SET, Spotify, Spotify'
  - 'RULE-SET, DomesticMedia, Asian TV'
  - 'RULE-SET, ABC, Global TV'
  - 'RULE-SET, AbemaTV, Global TV'
  - 'RULE-SET, Amazon, Global TV'
  - 'RULE-SET, Bahamut, Global TV'
  - 'RULE-SET, BBCiPlayer, Global TV'
  - 'RULE-SET, DAZN, Global TV'
  - 'RULE-SET, DiscoveryPlus, Global TV'
  - 'RULE-SET, encoreTVB, Global TV'
  - 'RULE-SET, F1TV, Global TV'
  - 'RULE-SET, FoxNow, Global TV'
  - 'RULE-SET, FoxPlus, Global TV'
  - 'RULE-SET, HBOGo, Global TV'
  - 'RULE-SET, HBOMax, Global TV'
  - 'RULE-SET, HuluJapan, Global TV'
  - 'RULE-SET, Hulu, Global TV'
  - 'RULE-SET, Japonx, Global TV'
  - 'RULE-SET, JOOX, Global TV'
  - 'RULE-SET, KKBOX, Global TV'
  - 'RULE-SET, KKTV, Global TV'
  - 'RULE-SET, LineTV, Global TV'
  - 'RULE-SET, myTVSUPER, Global TV'
  - 'RULE-SET, Niconico, Global TV'
  - 'RULE-SET, Pandora, Global TV'
  - 'RULE-SET, PBS, Global TV'
  - 'RULE-SET, Soundcloud, Global TV'
  - 'RULE-SET, ViuTV, Global TV'
  - 'RULE-SET, AppleMusic, Apple TV'
  - 'RULE-SET, AppleNews, Apple TV'
  - 'RULE-SET, AppleTV, Apple TV'
  - 'RULE-SET, Apple, Apple'
  - 'RULE-SET, Telegram, Telegram'
  - 'RULE-SET, Crypto, Crypto'
  - 'RULE-SET, Discord, Discord'
  - 'RULE-SET, GoogleFCM, Google FCM'
  - 'RULE-SET, Microsoft, Microsoft'
  - 'RULE-SET, OpenAI, OpenAI'
  - 'RULE-SET, PayPal, PayPal'
  - 'RULE-SET, Scholar, Scholar'
  - 'RULE-SET, Speedtest, Speedtest'
  - 'RULE-SET, Steam, Steam'
  - 'RULE-SET, miHoYo, miHoYo'
  - 'RULE-SET, OtherDirect, Other Direct'
  - 'RULE-SET, OtherProxy, Other Proxy'
  - 'RULE-SET, JapanProxy, Japan Proxy'
  - 'RULE-SET, PROXY, Proxy'
  - 'RULE-SET, Domestic, Domestic'
  - 'RULE-SET, DomesticIPs, Domestic'
  - 'RULE-SET, LAN, DIRECT'
  - 'GEOIP, CN, Domestic'
  - 'MATCH, Others'
script:
  code: "def main(ctx, metadata):\n    ruleset_action = {\n        'Reject': 'AdBlock',\n        'Special': 'DIRECT',\n        'Netflix': 'Netflix',\n        'DisneyPlus': 'Disney',\n        'YouTube': 'YouTube',\n        'Spotify': 'Spotify',\n        'DomesticMedia': 'Asian TV',\n        'ABC': 'Global TV',\n        'AbemaTV': 'Global TV',\n        'Amazon': 'Global TV',\n        'Bahamut': 'Global TV',\n        'BBCiPlayer': 'Global TV',\n        'DAZN': 'Global TV',\n        'DiscoveryPlus': 'Global TV',\n        'encoreTVB': 'Global TV',\n        'F1TV': 'Global TV',\n        'FoxNow': 'Global TV',\n        'FoxPlus': 'Global TV',\n        'HBOGo': 'Global TV',\n        'HBOMax': 'Global TV',\n        'HuluJapan': 'Global TV',\n        'Hulu': 'Global TV',\n        'Japonx': 'Global TV',\n        'JOOX': 'Global TV',\n        'KKBOX': 'Global TV',\n        'KKTV': 'Global TV',\n        'LineTV': 'Global TV',\n        'myTVSUPER': 'Global TV',\n        'Niconico': 'Global TV',\n        'Pandora': 'Global TV',\n        'PBS': 'Global TV',\n        'Soundcloud': 'Global TV',\n        'ViuTV': 'Global TV',\n        'AppleMusic': 'Apple TV',\n        'AppleNews': 'Apple TV',\n        'AppleTV': 'Apple TV',\n        'Apple': 'Apple',\n        'Telegram': 'Telegram',\n        'Crypto': 'Crypto',\n        'Discord': 'Discord',\n        'GoogleFCM': 'Google FCM',\n        'Microsoft': 'Microsoft',\n        'OpenAI': 'OpenAI',\n        'PayPal': 'PayPal',\n        'Scholar': 'Scholar',\n        'Speedtest': 'Speedtest',\n        'Steam': 'Steam',\n        'miHoYo': 'miHoYo',\n        'OtherDirect': 'Other Direct',\n        'OtherProxy': 'Other Proxy',\n        'JapanProxy': 'Japan Proxy',\n        'PROXY': 'Proxy',\n        'Domestic': 'Domestic',\n        'DomesticIPs': 'Domestic',\n        'LAN': 'DIRECT'\n      }\n\n    port = int(metadata['dst_port'])\n\n    # Handle UDP traffic on port 443\n    if metadata['network'] == 'UDP' and port == 443:\n        ctx.log('[Script] matched QUIC traffic use reject')\n        return 'REJECT'\n\n    # List of common ports\n    port_list = [21, 22, 23, 53, 80, 123, 143, 194, 443, 465, 587, 853, 993, 995, 998, 2052, 2053, 2082, 2083, 2086, 2095, 2096, 3389, 5222, 5228, 5229, 5230, 8080, 8443, 8880, 8888, 8889]\n\n    # Check if the port is not in the common ports list\n    if port not in port_list:\n        ctx.log('[Script] not common port use direct')\n        return 'DIRECT'\n\n    # Resolve IP if it's empty\n    if metadata['dst_ip'] == '':\n        metadata['dst_ip'] = ctx.resolve_ip(metadata['host'])\n\n    # Match against ruleset action\n    for ruleset, action in ruleset_action.items():\n        if ctx.rule_providers[ruleset].match(metadata):\n            return action\n\n    # GeoIP check for CN\n    if metadata['dst_ip'] != '':\n        code = ctx.geoip(metadata['dst_ip'])\n        if code == 'CN':\n            ctx.log('[Script] Geoip CN')\n            return 'Domestic'\n\n    ctx.log('[Script] FINAL')\n    return 'Others'\n"
rule-providers:
  Reject: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/AdBlock.yaml', path: ./Rules/Reject, interval: 86400 }
  Special: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Special.yaml', path: ./Rules/Special, interval: 86400 }
  PROXY: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Proxy.yaml', path: ./Rules/Proxy, interval: 86400 }
  Domestic: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Domestic.yaml', path: ./Rules/Domestic, interval: 86400 }
  DomesticIPs: { type: http, behavior: ipcidr, url: 'https://github.com/s11214/rules/releases/download/rules/DomesticIPs.yaml', path: ./Rules/Domestic_IPs, interval: 86400 }
  LAN: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Lan.yaml', path: ./Rules/LAN, interval: 86400 }
  Netflix: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Netflix.yaml', path: ./rules/Netflix, interval: 86400 }
  Spotify: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Spotify.yaml', path: ./rules/Spotify, interval: 86400 }
  YouTube: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Youtube.yaml', path: ./rules/YouTube, interval: 86400 }
  DomesticMedia: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/DomesticMedia.yaml', path: ./rules/Bilibili, interval: 86400 }
  ABC: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/ABC.yaml', path: ./rules/ABC, interval: 86400 }
  AbemaTV: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/AbemaTV.yaml', path: ./rules/Abema_TV, interval: 86400 }
  Amazon: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Amazon.yaml', path: ./rules/Amazon, interval: 86400 }
  AppleMusic: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/AppleMusic.yaml', path: ./rules/Apple_Music, interval: 86400 }
  AppleNews: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/AppleNews.yaml', path: ./rules/Apple_News, interval: 86400 }
  AppleTV: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/AppleTV.yaml', path: ./rules/Apple_TV, interval: 86400 }
  Bahamut: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Bahamut.yaml', path: ./rules/Bahamut, interval: 86400 }
  BBCiPlayer: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/BBCiPlayer.yaml', path: ./rules/BBC_iPlayer, interval: 86400 }
  DAZN: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/DAZN.yaml', path: ./rules/DAZN, interval: 86400 }
  DiscoveryPlus: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/DiscoveryPlus.yaml', path: ./rules/Discovery_Plus, interval: 86400 }
  DisneyPlus: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/DisneyPlus.yaml', path: ./rules/Disney_Plus, interval: 86400 }
  encoreTVB: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/encoreTVB.yaml', path: ./rules/encoreTVB, interval: 86400 }
  F1TV: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/F1TV.yaml', path: ./rules/F1_TV, interval: 86400 }
  FoxNow: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/FoxNow.yaml', path: ./rules/Fox_Now, interval: 86400 }
  FoxPlus: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/FoxPlus.yaml', path: ./rules/Fox+, interval: 86400 }
  HBOGo: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/HBOGo.yaml', path: ./rules/HBO_Go, interval: 86400 }
  HBOMax: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/HBOMax.yaml', path: ./rules/HBO_Max, interval: 86400 }
  HuluJapan: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/HuluJapan.yaml', path: ./rules/Hulu_Japan, interval: 86400 }
  Hulu: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Hulu.yaml', path: ./rules/Hulu, interval: 86400 }
  Japonx: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Japonx.yaml', path: ./rules/Japonx, interval: 86400 }
  JOOX: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/JOOX.yaml', path: ./rules/JOOX, interval: 86400 }
  KKBOX: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/KKBOX.yaml', path: ./rules/KKBOX, interval: 86400 }
  KKTV: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/KKTV.yaml', path: ./rules/KKTV, interval: 86400 }
  LineTV: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/LineTV.yaml', path: ./rules/Line_TV, interval: 86400 }
  myTVSUPER: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/myTVSUPER.yaml', path: ./rules/myTV_SUPER, interval: 86400 }
  Niconico: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Niconico.yaml', path: ./rules/Niconico, interval: 86400 }
  Pandora: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Pandora.yaml', path: ./rules/Pandora, interval: 86400 }
  PBS: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/PBS.yaml', path: ./rules/PBS, interval: 86400 }
  Soundcloud: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Soundcloud.yaml', path: ./rules/Soundcloud, interval: 86400 }
  ViuTV: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/ViuTV.yaml', path: ./rules/ViuTV, interval: 86400 }
  Telegram: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Telegram.yaml', path: ./Rules/Telegram, interval: 86400 }
  Crypto: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Crypto.yaml', path: ./Rules/Crypto, interval: 86400 }
  Discord: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Discord.yaml', path: ./Rules/Discord, interval: 86400 }
  Steam: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Steam.yaml', path: ./Rules/Steam, interval: 86400 }
  Speedtest: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Speedtest.yaml', path: ./Rules/Speedtest, interval: 86400 }
  PayPal: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/PayPal.yaml', path: ./Rules/PayPal, interval: 86400 }
  Microsoft: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Microsoft.yaml', path: ./Rules/Microsoft, interval: 86400 }
  OpenAI: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/OpenAI.yaml', path: ./Rules/OpenAI, interval: 86400 }
  Apple: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Apple.yaml', path: ./Rules/Apple, interval: 86400 }
  GoogleFCM: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/GoogleFCM.yaml', path: './Rules/Google FCM', interval: 86400 }
  Scholar: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/Scholar.yaml', path: ./Rules/Scholar, interval: 86400 }
  miHoYo: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/rules/miHoYo.yaml', path: ./Rules/miHoYo, interval: 86400 }
  OtherDirect: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/test/OtherDirect.yaml', path: ./Rules/OtherDirect, interval: 86400 }
  OtherProxy: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/test/OtherProxy.yaml', path: ./Rules/OtherProxy, interval: 86400 }
  JapanProxy: { type: http, behavior: classical, url: 'https://github.com/s11214/rules/releases/download/test/JapanProxy.yaml', path: ./Rules/JapanProxy, interval: 86400 }
